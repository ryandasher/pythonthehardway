Python Characters:

< -> less-than
> -> greater-than
<= -> less-than-equal
>= -> greater-than-equal

Math operations follow the PEMDAS order, so do parenthesis, exponents, multiplication, division, addition and then subtraction.

% is referred to modulo. So if you have 30 % 9, 9 will go into 30 3 times and have 3 left over, so the answer is 3. Modulo always refers to the remainder. If you have 14 % 30, the answer is 14, because 30 can't go into 14, not even once.

Variables: Variables are simply names given to chunks of code, so that programmers can more easily remember those chunks of code and what they do.

Format string: A string is any piece of text that appears between double quotes. Essentially think of it as a bit of code your program might give to a human.

Tuple: Used when you need to pass multiple strings in one statement, e.g. -> "Who are you? %s Who are you? %s" % (Ryan, Dave)

%s - Call in string text.

%d - Call in integers.

%r - Call in anything. Use for debugging, since it calls in "raw data." This will give you the "raw programmer's" version of the variable, also known as the "representation."

Having a line of more than 80 characters is considered bad style in Python.

When you're using try / except blocks, the try ... except Exception, E is great for debugging, because it will catch any errors. Not recommended for production code, though.

Try and Except blocks are handy when you need your code to gracefully fail if a network condition isn't being met. This way your page doesn't return a 500 error if one part of the page is broken.

You don't need to put quotes around True or False because then Python will think they are simply a string, and things won't work right.

You can use %s to print out non-ASCII characters.
